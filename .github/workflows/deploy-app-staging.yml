name: 'Deploy DoCoffee App in Staging'

on:
  milestone:
    types: [closed]

  workflow_dispatch: # Allow you to run this workflow manually from the Action tab
  
env:
  BUILD_CONFIGURATION: Staging
  BUILD_PLATFORM: AnyCPU
  CSPROJ_PATH: src\DoCoffee.App\DoCoffee.App.csproj  
  OUTPUT_DIRECTORY: ${{ github.workspace }}\src\DoCoffee.App\bin\Staging\app.publish
  BUILD_DIRECTORY: ${{ github.workspace }}\build
      
jobs:
  
  check-milestone:
    runs-on: ubuntu-latest
    outputs:
      milestone_version: ${{ steps.extract-version.outputs.version }}
      milestone_is_valid: ${{ steps.extract-version.outputs.is_valid }}
    
    steps:
      - name: Extract Version from Milestone
        id: extract-version
        shell: bash
        run: |
          TITLE="${{ github.event.milestone.title }}"
          echo "Milestone title: $TITLE"
          
          if [[ "$TITLE" =~ ^customer\ v([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Valid format detected: $VERSION"
            echo "version=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_valid=true" >> $GITHUB_ENV
            echo "is_valid=true" >> $GITHUB_OUTPUT
          else
            echo "Invalid milestone format. Skipping..."
            echo "is_valid=false" >> $GITHUB_ENV
            echo "is_valid=false" >> $GITHUB_OUTPUT
          fi
          
  compare-versions:
    needs: check-milestone
    if: needs.check-milestone.outputs.milestone_is_valid == 'true'
    runs-on: windows-latest
    outputs:
      compare_version: ${{ steps.compare.outputs.version }}
      compare_is_valid: ${{ steps.compare.outputs.is_valid }}
    
    steps:
      - name: Compare Versions
        id: compare
        run: |
          Invoke-WebRequest "https://raw.githubusercontent.com/paulofoliveira/docoffee-app/refs/heads/main/build/GetApplicationInfo.ps1" -OutFile "GetApplicationInfo.ps1"          
          
          $currentAppVersion = .\GetApplicationInfo.ps1 -Url "${{ secrets.APP_MANIFEST_STAGING_URL }}"
          $nextVersion = $currentAppVersion.Version.NextVersion
                  
          if ($nextVersion -eq "${{ needs.check-milestone.outputs.milestone_version }}") {
            
            Write-Host "Match version detected: $nextVersion"
            
            echo "version=$nextVersion" >> $env:GITHUB_ENV
            echo "version=$nextVersion" >> $env:GITHUB_OUTPUT
            echo "is_valid=true" >> $env:GITHUB_ENV
            echo "is_valid=true" >> $env:GITHUB_OUTPUT
            
          }
          else {
          
            Write-Host "Invalid comparison between milestone version and next application version. Skipping..."
            
            echo "is_valid=false" >> $env:GITHUB_ENV
            echo "is_valid=false" >> $env:GITHUB_OUTPUT 
            
          }
    
  build-and-deploy:
    needs: compare-versions
    if: needs.compare-versions.outputs.compare_is_valid == 'true'
    runs-on: windows-latest 
    
    steps:

    - name: "Checkout"
      uses: actions/checkout@v4

    - name: "Update AppSettings"
      run: |              
            $appConfigPath = "${{ github.workspace }}\src\DoCoffee.App\App.config"
            & "${{ env.BUILD_DIRECTORY }}\UpdateAppSettings.ps1" -FilePath $appConfigPath -Key "MySecret" -Value ${{ secrets.MY_SECRET }}
            & "${{ env.BUILD_DIRECTORY }}\UpdateAppSettings.ps1" -FilePath $appConfigPath -Key "ApiKey" -Value ${{ secrets.API_KEY }}
                    
    - name: 'Setup MSBuild'
      uses: microsoft/setup-msbuild@v2

    - name: 'Setup Nuget'
      uses: nuget/setup-nuget@v2

    - name: 'Nuget Restore Packages'
      run: nuget restore ${{ env.CSPROJ_PATH }} -PackagesDirectory "src/packages"  

    - name: "Publish"
      run: |
        $nextVersion = "${{ needs.compare-versions.outputs.compare_version }}"
        msbuild ${{ env.CSPROJ_PATH }} /t:publish /p:Configuration="${{ env.BUILD_CONFIGURATION }}" /p:Platform="${{ env.BUILD_PLATFORM }}" /p:ApplicationVersion=$nextVersion /p:MinimumRequiredVersion=$nextVersion /p:VersionAssembly=$nextVersion
    
    - name: "Setup WinSCP"
      run: |
        choco install winscp -y
    
    - name: "Deploy Files"
      run: |        
        winscp.com /command "open ftp://${{ secrets.FTP_USER }}`:${{ secrets.FTP_PASSWD }}@${{ secrets.FTP_HOSTNAME }}`:${{ secrets.FTP_PORT }}" "option batch on" "option confirm off" "put ${{ env.OUTPUT_DIRECTORY }}\* /docoffee/" "exit"

    - name: "Notify Team on Google Chat"
      run: |
        $webhookUrl = "https://chat.googleapis.com/v1/spaces/${{ secrets.GOOGLE_CHAT_SPACE }}/messages?key=${{ secrets.GOOGLE_CHAT_KEY }}&token=${{ secrets.GOOGLE_CHAT_TOKEN }}"        
        $environmentName = @{$true="Produção";$false="Homologação"}["${{ env.BUILD_CONFIGURATION }}" -eq "Release"]
        $body = @{ "text" = "Publicada versão *${{ needs.compare-versions.outputs.compare_version }}* do aplicativo *DoCoffee* no ambiente de $environmentName." } | ConvertTo-Json
        Invoke-RestMethod -Method POST -Uri $webhookUrl -Body $body -ContentType "application/json"
        
  create-pr:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: Create PR from main to prod
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          PR_TITLE="chore(deploy): Release ${{ needs.compare-versions.outputs.compare_version }}"
          PR_BODY="Automated PR to merge main into prod after successful deployment."
          
          # Verifica se já existe uma PR aberta
          EXISTING_PR=$(gh pr list --base prod --head main --json number --jq '.[].number')
          
          if [ -z "$EXISTING_PR" ]; then
            echo "Creating new PR..."
            gh pr create --base prod --head main --title "$PR_TITLE" --body "$PR_BODY" --reviewer "paulofoliveira"
          else
            echo "PR from main to prod already exists (#$EXISTING_PR). Skipping creation."
          fi
